<?php

namespace App\Controller\Admin\Exploit;

use App\Entity\Exploit\Exploit;
use App\Model\Guilded\Media;
use App\Service\Exploit\GuiledMediasToExploits;
use App\Service\GuildedApi\GuildedApiMediaProvider;
use EasyCorp\Bundle\EasyAdminBundle\Collection\EntityCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\KeyValueStore;
use EasyCorp\Bundle\EasyAdminBundle\Config\Option\EA;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Event\AfterCrudActionEvent;
use EasyCorp\Bundle\EasyAdminBundle\Event\BeforeCrudActionEvent;
use EasyCorp\Bundle\EasyAdminBundle\Exception\ForbiddenActionException;
use EasyCorp\Bundle\EasyAdminBundle\Factory\EntityFactory;
use EasyCorp\Bundle\EasyAdminBundle\Factory\FilterFactory;
use EasyCorp\Bundle\EasyAdminBundle\Factory\PaginatorFactory;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use EasyCorp\Bundle\EasyAdminBundle\Security\Permission;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Vich\UploaderBundle\Form\Type\VichImageType;

class ExploitCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Exploit::class;
    }

    #[Route('/admin6314a8e/exploits/import', name: 'ADMIN_EXPLOITS_IMPORT', methods: ['GET', 'POST'])]
    public function adminExploitsImport(
        Request                 $request,
        GuildedApiMediaProvider $guildedApiMediaProvider,
        GuiledMediasToExploits  $guiledMediasToExploits
    )
    {
        if ('POST' === $request->getMethod()) {
            $medias = $guildedApiMediaProvider->getMediasByIds($request->get('exploits'));
            $medias = array_reverse($medias);
            $guiledMediasToExploits->populate($medias);
            return $this->redirectToRoute('admin', [
                'crudAction'         => Crud::PAGE_INDEX,
                'crudControllerFqcn' => ExploitCrudController::class,
                'menuIndex'          => 5,
                'submenuIndex'       => '-1',
            ]);
        }
        $pageSize = $request->get('pageSize');

        $medias = $guildedApiMediaProvider->getMedias($pageSize);

        return $this->render('admin/exploits/import.html.twig', [
            'exploits' => $medias,
            'pageSize' => $pageSize,
        ]);
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setDefaultSort(['created_at' => 'DESC'])
        ;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            ImageField::new('image_name', 'Image')->setBasePath('/uploads/images/exploit')->hideOnForm(),
            TextField::new('name', 'Nom'),
            BooleanField::new('is_active', 'Visible'),
            AssociationField::new('ships')->setFormTypeOptions([
                'by_reference' => false,
                'multiple'     => true,
            ]),
            AssociationField::new('manufacturers')->setFormTypeOptions([
                'by_reference' => false,
                'multiple'     => true,
            ]),
            AssociationField::new('tags')->setFormTypeOptions([
                'by_reference' => false,
                'multiple'     => true,
            ]),
            DateTimeField::new('created_at', 'Ajouté le')->hideOnForm(),
            DateTimeField::new('updated_at', 'Modifié le')->hideOnForm(),
            Field::new('imageFile', 'Image')->setFormType(VichImageType::class)->onlyOnForms(),
        ];
    }
}
