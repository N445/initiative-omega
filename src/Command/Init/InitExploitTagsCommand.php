<?php

namespace App\Command\Init;

use App\Entity\Exploit\Tag;
use App\Repository\Exploit\TagRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:init:exploit:tags',
    description: 'Add a short description for your command',
)]
class InitExploitTagsCommand extends Command
{
    private TagRepository          $tagRepository;

    private EntityManagerInterface $em;

    public function __construct(
        TagRepository          $tagRepository,
        EntityManagerInterface $em
    )
    {
        parent::__construct();
        $this->tagRepository          = $tagRepository;
        $this->em                     = $em;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $tagsNames = array_map(fn(Tag $tag) => $tag->getName(), $this->tagRepository->findAll());

        foreach ($this->getStantonPlanetLunes() as $item) {
            if (!in_array($item, $tagsNames)) {
                $tag = (new Tag())->setName($item);
                $this->em->persist($tag);
            }
        }
        $this->em->flush();

        $io->success('You have a new command! Now make it your own! Pass --help to see your options.');

        return Command::SUCCESS;
    }

    private function getStantonPlanetLunes()
    {
        return [
            'Hurston',
            'Lorville',
            'Arial',
            'Aberdeen',
            'Magda',
            'Ita',
            'Everus Harbor',
            'Crusader',
            'Orison',
            'Cellin',
            'Daymar',
            'Yela',
            'Port Olisar',
            'ArcCorp',
            'Area18',
            'Lyria',
            'Wala',
            'Baijini Point',
            'MicroTech',
            'New Babbage',
            'Calliope',
            'Clio',
            'Euterpe',
            'Port Tressler',
        ];
    }
}
